// 시스템 태스크

// Verilog는 루틴 연산을 하기 위한 표준 시스템 태스크(Standard system task) 제공.
// 모든 시스템 태스크는 $<키워드> 형태로 나타낸다.
// 시스템 태스크에 의한 연산은 화면에 출력하고, 넷ㄱ의 값을 모니터링하고, 멈추고, 끝내는 것들.

// 1. 화면 출력 태스크

// $display는 변수의 값 또는 문자열 또는 수식을 출력하기 위한 주요 시스템 태스크.
// 이것은 Verilog에서 매우 유용한 태스크 중 하나.

// 사용법 : $display(p1, p2, p3, ... , pn);
// p1, p2, p3, ... , pn은 문자열 또는 변수 또는 수식.
// $display의 형식은 C의 printf와 유사.
// $display는 어떤 인자 없이 개행 수행, 포맷 명세에 의해 포맷이 지정.
// Verilog HDL 명세서 참고.

// 따옴표 안의 문자열 출력
$display("Hello Verilog World");
// 현재 시뮬레이션 시간 출력.
$display($time);

// 특수 문자
$display("This is a \n multiline string with a %% sign")


// 2. 모니터링 태스크

// Verilog에서는 $monitor 태스크로 신호의 값이 변할 때마다 그 신호를 출력.

// 사용법 : $monitor(p1, p2, ... , pn);

// 파라미터 p1, p2, ... , pn은 변수, 신호 이름, 문자열이 될 수 있다.
// $monitor는 $display와 사용하는 것이 비슷하다.
// $monitor는 변수 또는 파라미터의 지정된 신호의 값을 계속 모니터링, 리스트의 어느 한 변수나 신호가 변할 때마다 모두 출력.
// $display와 달리, $monitor는 단 한번만 사용할 필요가 있다. 동시에 단 하나만의 모니터링 리스트만이 수행.
// 만약 하나 이상의 $monitor 문장이 시뮬레이션에 존재하면 마지막 문장이 수행. 앞의 문장들은 무시.
// 모니터링을 on, off하기 위한 두 개의 태스크가 사용된다.

// 사용법 : $monitoron;
//         $monitoroff;

// 3. 시뮬레이션 중단과 종료 태스크

//시뮬레이션을 하는 동안 중단을 하기 위해서 태스크 $stop를 제공.

// 사용법 : $stop;

// $stop 태스크는 상호 작용 모드의 시뮬레이션에서 사용. 설계자는 상호 작용 모드를 통해 디버그를 할 수 있다.
// $stop 태스크는 설계자가 시뮬레션 중단을 원하거나 신호의 값을 조사하고자 할 떄마다 사용할 수 있다.

// $finish 태스크는 시뮬레이션을 끝내기 위해 사용된다.

// 사용법: $finish;

// 단위 시간 100에서 시뮬레이션을 중단하고 결과를 조사.
// 단위 시간 1000에서 시뮬레이션을 끝냄.
initial // 시간 0.
begin
    clock = 0;
    reset = 1;
    #100 $stop; // 단위시간 100에서 시뮬레이션 중단.
    #900 $finish; // 단위시간 10000에서 시뮬레이션을 끝냄.
end

// 4.컴파일러 지시어

// Verilog는 컴파일러 지시어를 제공.
// 모든 컴파일러 지시어는 `<키워드> 구조로 정의.

// 4.1 `define

// `define 지시어는 Verilog에서 텍스트 매크로를 정의하는데 사용.

// 4.2 `include

// `include 지시어는 다른 Verilog 파일에 있는 Verilog 소스 파일의 전체 내용을 컴파일하는 동안 포함하게 해준다.

