# 딕셔너리 조작하기

# 딕셔너리 키-값 추가하기

# setdefault : 키-값 쌍 추가
# update : 키의 값 수정, 키가 없으면 키-값 쌍 추가

# 딕셔너리에 키와 기본값 저장하기
# setdefault(키)는 딕셔너리에 키-값 쌍을 추가한다. 키만 지정하면 값에 None을 저장
x = {'a' : 10, 'b' : 20, 'c' : 30, 'd' : 40}
x.setdefault('e')
print(x)
# setdefault(키, 값)은 딕셔너리에 키-값 쌍을 추가한다
x.setdefault('f', 100)
print(x)

print() # 줄 바꿈을 위한 코드

# 딕셔너리에서 키의 값 수정하기
# update(키=값)은 이름 그대로 딕셔너리에서 키의 값을 수정한다
x = {'a' : 10, 'b' : 20, 'c' : 30, 'd' : 40}
x.update(a=90) # 딕셔너리에 있던 키 a에 값 변화
print(x)
x.update(e=50) # 만약 딕셔너리에 없으면 키-값 쌍을 추가한다
print(x)
x.update(a=900, f= 60) # 컴마를 이용해 한 번에 여러 작업 수행 가능
print(x)

print() # 줄 바꿈을 위한 코드

# update(키=값)은 키가 문자열일 때만 사용 가능
# 만약 키가 숫자일 경우, update(딕셔너리)로 딕셔너리를 넣어 값을 수정한다
y = {1 : 'one', 2 : 'two'}
y.update({1 : 'ONE', 3 : 'THREE'})
print(y)

# 딕셔너리가 아닌 리스트와 튜플로도 수정 가능
# 리스트는 [[키1, 값1], [키2, 값2]] 형식으로 키와 값을 리스트로 만들고 이 리스트를 다시 리스트 아넹 넣어서 키-값 쌍을 나열
# 튜플 역시 같은 형식 ((키1, 값1), (키2, 값2))
y.update([[2, 'TWO'], [4, 'FOUR']])
print(y)

# update(반복가능한객체)는 키-값 쌍으로 된 반복 가능한 객체로 값을 수정
# 즉, 다음과 같이 키 리스트와 값 리스트를 묶은 zip 객체로 수정
y.update(zip([1, 2],['one', 'two']))
print(y)

# 참고 : setdefault와 update의 차이
# setdefault는 키-값 쌍을 추가할 수 있으나 이미 들어있는 키의 값은 수정할 수 없다
# 반면 update는 키-값을 쌍을 추가할 수 있으며 이미 들어있는 키의 값을 수정할 수 있다
x = {'a' : 10, 'b' : 20, 'c' : 30, 'd' : 40}
x.setdefault('a', 90)
print(x)

print() # 줄 바꿈을 위한 코드

# 딕셔너리에서 키-값 쌍 삭제하기
#pop(키)는 딕셔너리에서 특정 키-값 쌍을 삭제한 뒤 삭제한 값을 반환한다
x = {'a' : 10, 'b' : 20, 'c' : 30, 'd' : 40}
print(x.pop('a')) # 삭제한 키에 값이 반환된다
print(x) # 특정 키-값 삭제 이후의 딕셔너리가 출력된다
# pop(키, 기본값)은 딕셔너리 안에 특정 키가 없을 경우 지정한 기본값을 출력
print(x.pop('z', 0)) # 딕셔너리 x 안에 키 z는 없다

# del로도 특정 키-값 쌍을 삭제할 수 있다
x = {'a' : 10, 'b' : 20, 'c' : 30, 'd' : 40}
del x['a']
print(x)
del x['z']
print(x)
